name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Ensure setuptools is installed
      run: pip install --upgrade pip setuptools

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django

    - name: Run migrations
      env:
        DB_ENGINE: django.db.backends.postgresql
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        CELERY_BROKER_URL: amqp://guest:guest@localhost:5672//
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        python manage.py migrate

    - name: Run tests
      env:
        DB_ENGINE: django.db.backends.postgresql
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        CELERY_BROKER_URL: amqp://guest:guest@localhost:5672//
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Django
      id: meta-django
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Extract metadata (tags, labels) for Celery
      id: meta-celery
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-celery
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Django image
      id: build-django
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta-django.outputs.tags }}
        labels: ${{ steps.meta-django.outputs.labels }}

    - name: Build and push Celery image
      id: build-celery
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.celery
        push: true
        tags: ${{ steps.meta-celery.outputs.tags }}
        labels: ${{ steps.meta-celery.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    # Note: In a real deployment, you would configure kubectl to connect to your cluster
    # This is just a placeholder showing the deployment structure
    - name: Deploy to Kubernetes (placeholder)
      run: |
        echo "Deploying to Kubernetes cluster..."
        echo "kubectl apply -f k8s/"
        echo "kubectl set image deployment/django-deployment django=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n django-app"
        echo "kubectl set image deployment/celery-deployment celery=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-celery:${{ github.sha }} -n django-app"
        echo "kubectl rollout status deployment/django-deployment -n django-app"
        echo "kubectl rollout status deployment/celery-deployment -n django-app"
